* RABIN-KARP-MATCHER

Rabin and Karp proposed a string-matching algorithm that performs well
in practice and that also generalizes to other algorithms for related
problems, such as two-dimensional pattern matching. The Rabin-Karp
algorithm uses Θ(m) preprocessing time, and its worst-case running time
is Θ((n - m + 1)m). Based on certain assumptions, however, its
average-case running time is better.

RABIN-KARP-MATCHER(T, P, d, q) 1 n = T.length 2 m = P.length 3 h = =
dᵐ⁻¹ mod q 4 p = 0 5 t₀ = 0 6 for i = 1 to m preprocessing 7 p = (dₚ + P
[i]) mod q 8 t₀ = (dt₀ + T[i]) mod q 9 for s = 0 to n - m matching 10 if
p == tₛ 11 if P [1.. m] ==== T[s + 1..s + m] 12 print “Pattern occurs
with shift” s 13 if s < n - m 14 tₛ₊₁ = (d(tₛ - T[s + 1]h) + T [s + m +
1]) mod q

[[RABIN-KARP-MATCHER/517E28F3-2895-4800-BDEF-B8FD731EA309.png]]
* software-engineering/data-structures/text/RABIN-KARP-MATCHER
